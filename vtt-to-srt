#!/usr/bin/env python3
import html
import os
import re
import sys

from pysrt.srtitem import SubRipItem, SubRipTime
from webvtt import WebVTT

script = sys.argv[0]
args = sys.argv[1:]


def usage():
    return "%s FILE...\n" % os.path.basename(script)


if len(args) < 1:
    sys.stderr.write(usage())
    sys.exit(1)


def replace_colors(raw_text, colours_arg, tag_name):
    result = raw_text
    for k, v in colours_arg.items():
        regex_string = "<" + tag_name + "(?:\\..*?)?\\." + str(k) + "(?:\\..*?)?>(.*?)</" + tag_name + ">"
        if re.search(regex_string, result) is not None:
            result = re.sub(regex_string, lambda x: replace_color(x, tag_name, v), result)
    return result


def replace_color(x, tag_name, v):
    return ("" if tag_name == "c" else ("<" + tag_name + ">")) \
           + "<font color=\"" + v + "\">" \
           + html.unescape(x.group(1)) \
           + "</font>" \
           + ("" if tag_name == "c" else ("</" + tag_name + ">"))


for arg in args:
    index = 0

    file_name, file_extension = os.path.splitext(arg)

    if not file_extension.lower() == ".vtt":
        sys.stderr.write("Skipping %s.\n" % arg)
        continue

    srt = open(file_name + ".srt", "w")

    read = WebVTT().read(arg)

    colours = dict()
    for style in read.styles:
        colours_found = re.compile(r'::cue\(\.([^)]+)\)\s*{.*?color:(.*?);.*?}').findall(style.text)
        colours_classes = list(map(lambda x: x[0], colours_found))  # [1:] to remove leading .
        colours_values = list(map(lambda x: x[1].replace(" ", ""), colours_found))
        colours = dict(zip(colours_classes, colours_values))

    for caption in read.captions:
        index += 1
        start = SubRipTime(0, 0, caption.start_in_seconds)
        end = SubRipTime(0, 0, caption.end_in_seconds)
        caption_text = caption.raw_text
        no_tag_found = True
        if re.search("<c\\..*?>.*?</c>", caption_text) is not None:
            caption_text = replace_colors(caption_text, colours, "c")
            no_tag_found = False
        if re.search("<i\\..*?>.*?</i>", caption_text) is not None:
            caption_text = replace_colors(caption_text, colours, "i")
            no_tag_found = False
        if re.search("<b\\..*?>.*?</b>", caption_text) is not None:
            caption_text = replace_colors(caption_text, colours, "b")
            no_tag_found = False
        if re.search("<u\\..*?>.*?</u>", caption_text) is not None:
            caption_text = replace_colors(caption_text, colours, "u")
            no_tag_found = False
        if no_tag_found:
            caption_text = html.unescape(caption.text)
        srt.write(SubRipItem(index, start, end, caption_text).__str__() + "\n")
